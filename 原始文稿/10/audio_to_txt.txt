银行的手机是否会被盗用? 如果是,我们将尽快解决这个问题。 如果您认为您的手机被盗用,您将需要通知您的家人。 如果您认为您的手机被盗用,您将需要通知您的家人。 如果您认为您的手机被盗用,您将需要通知您的家人。 如果您认为您的手机被盗用,您将需要通知您的家人。 今天我们将讨论两个主题。 第一是版本控制。 第二是如何让文件夹和代码保持清洁和管理。 第三是如何在同一个课题组中, 让不同的人可以交接。 这对于一个科学项目来说非常重要。 如果您的文件夹很乱, 而且没有一个统一的标准, 当不同的人合作时, 您将需要花很多时间了解前面做了什么。 第一,我们讨论Git和GitHub。 当我们讨论Git时, GitHub是一个网站。 GitHub是目前来说 全球开源程序员用最多的一个 传输代码的网站。 但是,这种传输代码的网站 并不是只有GitHub一个。 包括我们国内的Gitee, 还有像比方说 如果您想要 认识一个狐狸 作为标志的网站, 还有Bitbucket, 这些网站和服务 并不是只有GitHub一家。 但是,他们基本上 都是遵循同一种逻辑 来进行传输。 这些网站 都是遵循同一种逻辑 来进行代码的管理。 基本上,大家都可以采用Git这个软件 来对我们自己的文件进行管理。 为什么我们要讨论Git? 最重要的一个原因是 为什么我们要使用它? 我们之前说过有两个很重要的功能。 第一个是帮助自己 更好地进行文件管理。 第二个就是协作。 假如我自己用了, 我的合作者没有用, 那肯定就协作不了。 但是对你自己来说也是非常重要的。 大家可能会有一个印象, 尤其是写毕业论文的时候, 到了某一个版本, 导师还觉得有问题, 最终版1,最终版2, 然后又加了一个最终版,最终版,最终版。 一打开文件夹,全都是这样的东西。 这就是我们活生生的一个例子。 这对于一个文档来说可能还可以接受, 因为它的内容可能比较重要, 可能你每一个修改都觉得有必要把它保存下来。 但是对于代码来说,你可能也想把它保存下来, 但是你这么多代码的话, 你怎么去进行这个比较? 你想知道我这一次代码跟上一次代码之间 发生了什么变化,对吧? 然后以及每一次的修改我都把它保存下来, 这个其实对我们来说是很重要的。 而且有的时候你可能觉得大部分的修改 你都觉得可能是不一定会有用,对吧? 但是你也不知道它到底会不会在某一天会有用, 因为你把它保存在电脑上面, 那这个时候像GitHub这样的一个工具就提供了 非常好的一个小的助手吧。 那么这是对于我们个人来说, 对于团队来说很好地进行协作, 那是另外一回事。 然后如果说我们能够使用Git和GitHub的话, 也同时意味着什么呢? 我们其实融入到了一个更大的community里面, 就是更大的一个社区, 这个社区有个什么好处?就是大家都在上面公开自己的代码, 贡献自己的代码,然后你也可以去把自己的代码公开, 然后你也可以把别的代码拿过来, 就是来借鉴,来使用。 那么实际上现在大家都知道ChartGPG非常火,对吧? 那么在ChartGPG火之前有一个软件其实在程序员当中 已经开始广泛地使用了, 就是Copilot,是微软出的一个 帮助大家去写代码的一个工具。 当然它是付费的,但实际上它的伦理性的话 确实是有争议的,为什么呢? 因为GitHub应该是在18年还是19年,反正就19年前后吧, 被微软给收购了。 收购了之后呢,意味着它可以获得GitHub的数据库, 所以它就可以直接获取 全世界最大的一个由程序员所贡献的 开源的代码库。 于是它就根据这个代码库进行训练, 训练出了一个帮助大家写代码的机器人。 这个非常好用,如果你用了之后发现 就是非常的快捷,尤其是一些常用的基本操作, 比方说读取文件啊,写一个小的for loop, 然后怎么样怎么样,这个是非常方便的。 这个车员呢,就是说 我们使用GitHub以后,我们不仅仅可以去 帮助自己的代码进行管理, 版本控制和备份,以及 输入实际的一些功能,而且还可以融入到一个更大的 社区里面去,就是GitHub这个社区,然后呢你去 向其他的写代码的人进行学习。 那么你也可以follow,就是关注很多 跟你做类似工作的,或者很相近的工作的 这些人,他们的公开代码。而且大家也知道 开源肯定是越来越大 就是说越来越重要的一个趋势。而最近几年 最近几天吧,最近几天应该有一些 评论了,就是说其实OpenAI和 这个Google可能都是比不过开源的 这些工具的。因为开源的话 就意味着几乎全世界的每一个人 只要你能够连互联网,你就能够给他进行 贡献东西,你贡献数据,然后你也可以发挥你自己的 聪明才智,对他进行改变。那这样的话,任何一个公司 他都是,基本上都是无法匹敌的。 所以开源它有很多的好处。 OK,那我们讲完它的好处之后,我们讲 实际上如何来运用对吧。首先 大家要去下载这个Git的软件 大家有下载吗? 我在群里面专门提醒过小组长 大家现在有下载到安装吗? 然后我们是Windows的系统的话 你就下载这个Windows,如果你是Mac 我们最好是能够 做一个实际的操作,这样会比较好一点。 要不然的话,你讲完之后,你后面再去 听一遍,然后再follow的话也会比较慢。 那么下载完了之后 假如说我们打开自己的 这个R的话呢,理论上讲了,它应该是 比方说我们打开这个地方对吧,有一个 控制台,这是我们以前的控制台,那么这个地方有个Terminal 大家可以看到这个Terminal 实际上就是你的电脑的一个我们说的 命令,就是叫什么,命令提示符对吧 这个地方我们其实可以去 测试一下我们到底有没有Git 你看 我现在没有安装啊,因为我这个电脑其实主要就是用来教学用的 所以我很多时候都没有安装它 大家可以看到Git是,它说 不知道有这个Git 那为什么呢,就是因为实际上我根本没有安装对吧 我现在跟大家一起来安装一下 我自己下载到我存在我的OneDrive上面了 这个大家可以看到这个GNU也是一个 开源的一个协议啊 就很多软件都是采用这种协议来进行的 我们一般采用 就采用这个 默认的就行了,但是它这里有个新的还是可以尝试一下 就是把这个Git Bash File加到这个 Windows的Terminal里面,以前是没有的,就意味着以前你 如果你运行原生态的Git的话,你需要在它自己的 这个控制台里面运行 这个UseVim什么的 这个其实你可以不用管,然后你可以用其他的 比方说你可以用这个VSCode 或者你可以用RStudio都可以 那么VSCode的话实际上是一个非常好的 IDE,它基本上是目前是我除了 采用这个R以外的一个 RStudio以外的另外一个 IDE,当然因为我这个电脑它没有 安装VSCode好像,因为我平时不怎么用 这个电脑来处理数据 但是用Nano也可以,但是我们就用默认的就好了 就是这个Vim 然后其他的我们就 直接就一路这个Next对吧 就是我们就不用管它了 这个地方 我们还是用它默认的吧 我们就全部用它默认的 然后安装一下 然后我们就放在这里 然后我们就放在这里 然后我们就放在这里 然后我们就放在这里 我们先放在这里,这个地方它实际上就已经安装完了对吧 然后 比方说我们为了保险起见我们可以比方说 就重新restartR对吧 然后这个Terminal的话其实我们也可以 重新再 比方说我们可以把这个Terminal关掉 看一下 我们把它重新关了之后再打开一个新的 Windows 然后我们再看一下Git 然后我们再看一下Git 然后我们再看一下Git 然后我们再看一下Git 然后我们再看一下Git 如果安装成功的话它应该会 不会报错对吧 我这个地方会比较慢了,为什么呢 一般来说我这边 它在Git里面它会有一个假设你是一个可以 能够识别的一个文件夹的话它里面有很多Git 一个隐藏的文件夹来去记录你的所有的 版本信息,那么这个时候的话 因为我这个不是本地我在我的OneDrive里面 所以它现在下了很多 把那些文件下来然后进行读取所以我这个比较慢 但是一般来说的话大家可能 还是会报一个错,但这个时候报错跟我现在这个报错就不一样了 我之前报错的是什么,它说没有找到这个Git 这个Command对吧,就是没有这个Git的命令 那么你现在安装了Git之后呢它应该给你 报的就是说你这里没有任何Git相关信息 为什么呢,因为你的文件夹可能是没有 就是没有初始化的 这里面之前没有运行过这个Git 然后我们再看一下那我们就先让它慢慢的下载,然后我们再回到这里 现在我们假定大家都已经下载了这个工具 那么第2个的话我们就需要找一个平台来 托管我们自己的这个代码对吧,我们要托管 就是说它实际上是一个类似于公共的一个 你可以把它理解为类似于一个火车站的一个存包处 那么这个存包处有两种存包的办法 一种就是你的自己的private的repository 就是你自己的私人的存包的一个地方 另外一个就是公共的,就是你把你的东西放在那里 然后打上你的名片,这个东西就是你的 然后它当然也带有一些你的独特的信息 别人想要可以使用 而且你可以在上面加一个这个就是版权说明对吧 就是你要使用我这个代码的话如何来使用 那么一般来说我们使用这个Github对吧 那这个时候我们可以来看一下我们退出这个 那么Github它在国内其实不太稳定的 因为Github是一个完全开源的一个 一个仓库一个托管的地方 那么有的时候它上面会有一些有一部分的内容 它可能是跟我们国家的法律是相违背的 所以有一些内容会被我们的这个 这个网络网管给屏蔽掉 所以有的时候会不太稳定 有的时候会有DNS污染什么的 但总体来说还是能够访问的一个网站 因为它的这个资源是非常宝贵的 那么如果大家首先打开的话可能就是 我应该sign out以后再说 大家可能碰到是这么一个界面对吧 就是这个时候的话你需要去sign up 就是你需要去注册一个账号 那这个时候你就需要去输入自己的比如说邮箱 那么Github的话是邮箱来进行注册的 这是一个常用的大家可以去注册一下 我们来首先看一下就是推荐大家使用的话是这种 国际的这种邮箱可能会比较好一点 不容易出问题稍微稳定一点 然后我刚刚也跟大家说了 我们国内有一个有一个托管的网站对吧 叫GT 那么GT它也是一个 就国内的开发者试图要去做一个托管的一个平台 那么它的功能可能没有Github那么强大 但是其实也有还是有一些就进行本土化的一些过程的 大家如果就是说你觉得OK 我就在国内生态下面使用 那你在GT上面注册一个账号也是可以的 我自己也注册过一个GT的 它其实很好的可以跟Github进行一个切换 然后你可以完全把GT的内容copy到Github上面去 也可以很容易把Github的一个代码一个项目 完全copy到GT上面去 然后另外的话还有一个叫做GitLab 我之前也用过 那么GitLab的话它其实好像有一段时间 它好像是对俄罗斯的程序员停止了服务 因为它应该是一个美国的公司 而且是商业化程度比较高的一个公司 所以某种程度上讲它是有风险的 为什么呢因为这种 它的开源的许可没有Github那么开放 意味着它会受到美国的法律的管制比较严重 当然就是说比方说GT的话 它就受国内的法律的管制就会比较严格一点 相对来说的话Github是一个目前来说仍然保持着 最大的开放度的一个网站 包括前一段时间乌俄的叫什么 我们按照俄罗斯的说法叫特别精神行动对吧 就乌俄的事件以后的话 实际上有一段时间有人提倡 就是说在Github上面 我们是不是要抵制俄罗斯的程序员 后来这个事情也其实遭到了大家的反对 因为大家觉得好像政府的事件 不一定跟单个的程序员本人是有关的 所以后来这个事情闹了一下之后 就好像我印象中是没有真正的成功 所以建议大家还是使用Github 因为它是一个最大的社区 那么你注册完了之后 其实你就可以你自己可能就应该是空的 就是新的什么都没有对吧 那么如果说你什么都没有 你其实最好的一个办法就是去你去创建一个新的对吧 在repository这里你去新建一个 这是一种办法 另外一个你就可以把我们的客界比方说直接去fork 这是我们刚刚说的community很重要的一点 你可以直接把别人的整个公开的代码库完全就fork过来 比方说我这里会关注的一些人 比方说我看一下我关注的这些人 比方说这个是我们助教同学的 大家可以看到比方说这个地方的话 假如说我们看到这个客界对吧 我们直接可以点fork 叫fork是叉子的 你让我们可以直接把它插过来 也就是说我们这整个项目 我可以试一下做一个演示 大家可以看到我就点一下这个fork对吧 那么它会告诉你 fork到哪个地方去 大家可以看到 就是实际上你是要在原来的 这个repository就原来这个仓库上面 你建立一个衍生的一个仓库对吧 那么这个时候你看这个ola的话 就是在你自己名下的这些账号 那么我自己因为我除了个人账号以外 我还有一些组织的账号 所以其实你可以选择 你把它fork到哪个账号下面去 然后假如说我就fork到我个人的账号里面 然后你给他命一个什么名字 比方说这个孟征他以前叫presentation对吧 然后我这里就叫我取一个名字表示区别 就是我只是演示用 那么我就是叫做presentation examples 那么这个名字的话 必须和我自己之前所有的 这个名字都是不相冲突的 比方说我有一个是可能冲突的 我试试看 大家可以看到我以前有一个 有一个repository 它的名字叫docker-http 那么这个时候我再取这个名字的话就不行了 所以我还是叫回原来的名字 然后后面加一个example 那么然后我就可以点击create fork 那么这个时候它就在显示 就是说你正在forking对吧 那么fork完了之后 我在我个人的名下的账号里面就多了一个 我刚刚fork过来 就是相当于是别人那里有一整个东西 我用叉子把它叉下了 然后叉到我自己的这里来 就这个意思fork对吧 但是它也同时保留了你fork的一个痕迹 比方说你这个是从孟征这里 孟征的presentation这个地方fork过来的对吧 这样的话我就有它全部的信息了 那么我自己就可以接下来做后面操作对吧 然后或者我就不用做后面操作 我就可以把它放在自己名下做学习使用 然后这个地方就可以有两个 我们来介绍一下这个页面 我想一下 但是现在到哪一步了 我还能不能往下讲 我讲的太慢了 大家注册程度那么好 你自己查一下 不要学校的人家能查 学校的人家你毕业之后就给你查 不要给力 大家就自己查一下 因为要不就自己分别 然后你觉得我没有出镜 像我现在临时注册也可以 你自己查一下 然后你自己查一下 然后你自己查一下 然后你自己查一下 然后你自己查一下 然后你自己查一下 这个也非常重要 至少现在注册到这个Github研发的话 我这讲的完全是 我也是 你拿什么玩的 我也不知道他现在在用什么 给你打个音乐 好 这会儿 我来 你先拿好 好 你的那个声音关系确实有点小 不是 我这边 我这边 那你这边找个词 就这样 希望你没有进场 大家最好 自己 就是现在注册一个Github的账号 现场完成吧 要不然的话越拖越久 大家如果 我越往后面讲的话 这个东西越来越多 大家可能会越来越记不住了 如果你没法完成这个注册的话 举一下手 在注册完了之后呢 我刚刚讲的不好对吧 大家打开这个东西去Fork一下 这个是我们的这个课程的 这个Github页面 那么我把这个发到群里一下 群里一下 发到我们这个聊天框这个地方 然后大家可以直接去打开 然后你在这里的话 我因为这是我自己的呀 所以我这里没有Fork 那么理论上讲 你应该可以点一个Fork 你去把我这个Fork出来 就是把我们这门课的这个Github的 这个这个整个Fork 这个确实应该第一阶段就讲了 讲了之后大家不断的学我们 就觉得很好 但是这学期还没有结束啊 所以大家还有很多机会 好那个大家有什么问题举手 我们助教可以帮忙答应 大家Fork之后的话 不会自动更新啊 但是要更新很简单 我再回到我刚才Fork的那个项目上面去 大家可以看到我这个是从孟在这里Fork的 对不对 那么我这里有两个在这个代码 这个地方我点的是这个code 对吧 这个code的地方有两个按钮 一个叫做contribute 一个叫做synic 这个synic fork就是说 假如孟辰他后面又在这里 又加了一个名字对吧 那我可能就想跟着跑程度 那我要点一下这个synic fork 那么Github就会自动识别 我的Fork的这个repository 跟他的那个我们说的 这个主repository之间有没有差别 如果有差别的话 他就告诉我你可以进去synic 你可以把他的这个train转过来 如果没有的话 他就是这样的 就是说我现在这个french对吧 in their viewupstream就是它原来的那个会更加落后,对吧,没有落后,所以你不用同步 那么这个contribute是什么,就是说 假如你自己在这个地方做了什么更新,对吧 你觉得我做的更新挺好的,也不要给孟征也拿过去,对吧 这个地方呢,你就点一下contribute 然后因为我这里没有任何的更新啊,所以就没有办法 这个按钮它就是一个灰色按不动,对吧 假如我有更新之后的话,它里面的那两个就会 我就可以像,就是孟子在提出一个请求,就是说我做了更新 你应该把我的这个更新整回进去 那这就是我们说的协作的很重要的一部分,然后我这里可以做一个test 因为我已经复合过来了,对吧 然后我自己就可以编辑了,因为这是一个txt,所以说在Github上它有一个很好的功能就是 对txt这种简单的文章你可以直接编辑 然后你如果说浏览器里面加些插件的话,可能就直接可以在线编辑很多这个 Github里面的东西 比方说我就这里说 它说其他都懒得写了,对吧 我说你还是写一下吧 哈哈哈哈 比方说我就 就纯粹是演示啊,大家可以看到 这个电脑用的少确实不太行啊 打字都 我就是加了几个文字对吧 然后大家可以看到在下面 下面的话它会告诉你这个commit change 就是说你这次做了什么样的修改对吧 你就可以在这里我就说这是一个test 然后在下面加一个test 然后我就是叫做commit change 就是说我把我的这个修改记录下来 OK大家可以看到我这里现在已经更新了对吧 我们可以回到这个地方 回到这个再点击一下 那么这个时候它会提示我 我的这个repostrate,我的这个分支 它比原来的分支要更前了对吧 因为我已经做了更改了 所以它是ahead 那么这个时候我可以很简单就点一下这个contribute 然后我就叫做一个open pull request 就是打开一个pull request 就是希望它把我这个东西拉过去对吧 然后呢我就创建一个pull request 然后这个时候呢 因为我不是那个孟崢创建的那个项目的管理员 所以这个时候实际上我只是说我告诉他 我做了一些更改 他那边就收到消息 收到消息之后呢 他可能这个时候就需要选择 他可以决定是不是要把我这个东西核定过去 对吧他可以直接把我这个否定 他说你这个没有意义 然后就把他这个否定掉拒绝掉对吧 然后这样的话我这个pull request就直接被关掉了 当然他也可以接受对吧 那这样的话我的这个更改就加入他的这个新的pull request里面去了 就加入他的那个原来的项目里面去了 所以这样的话我们就是一个就很容易进行协作了对吧 当然我们今天不是主要讲那个协作 这里又显示孟征他已经他已经接受了对吧 所以我们可以看一下 大家可以看到我们写pull request之后 他就直接回到了孟征的这个repository下面 而不是我原来的那个了 大家注意前面这个账户是谁的 所以这个地方他的那边也更新了对吧 然后我的这边我再去回过头来看我的对吧 然后我们再回过头来看我自己的 我们可以更新一下 那么这个时候看到我们这个地方contribute又不行了对吧 但是呢他会提示我就是叫做one commit behind 就是我这个时候比孟征那个branch要落后了 为什么呢 因为他合并了我刚刚这个pull request 他本身也会被记录下来 所以大家可以看到这个时候 我这个scenic fork这个地方 他就告诉我我的这个地方out of date对吧 落后了 那么怎么办呢 有一个绿色的键按一下就好了 就是update branch 这个时候我们可以看这个commit 我们刚刚做了什么东西 首先是我在这里对吧 我有一个test 然后test完了之后呢 这是我刚才做的对吧 三分钟之前的大家可以看到 我做了一个test 然后呢并且有一个pull request 然后孟征他做了一个动作就是 match pull request对吧 他从我这里合并了一个 所以这样的话 我做了一个动作 我的这边就会比孟征那边叫多了一个感应中对吧 我把它推到孟征那边 他接受了之后 他接受了这个改动之后 本身又记录了一个动作 所以这个时候 他的那边又比我这边又多了一个动作 所以这个时候我同步之后 我们两边完全一样了 这是关于这个fork和同步的问题 那么我们可以看一下在这个GitHub里面 它还有很多强大的功能 比方说一般来说 我们看怎么看一个repository 一个仓库对吧 一个项目它是不是很流行 是不是很popular 我们可以看到两个指标 第一个就是它有被多少人fork 第二个就是被多少人start 就是加薪 比方说我们可以点开这个地方fork对吧 那就是说 有谁在fork这个项目对吧 我这个地方的话是0人fork 但比方说我可以看一下孟征这个对吧 那这边我点这个fork的话 它这个地方就显示 虽然我把它fork了一次对吧 然后另外这个start就是说有多少人 有多少人给你的 把你的这个加薪 加薪的话大家一般就是觉得是一个好东西 对吧 就像这个收藏起来 那么我其实收藏了很多 我觉得比较有价值的东西 我看一下 我刚才点的这个地方 就是在GitHub的右上角 有一个你自己的账户对吧 那么你点一下自己的这个头像的话 你可以下面有很多东西对吧 那么你可以点一下你的这个profile 你点了这个profile的话 你就可以看到一个overview overview的话就是说你自己目前有多少项目等等 然后第二个就是你的这个repository 就是你多少个项目的这个仓库 那这是我们作为 就是分析数据或做科研的人 最常用的两个地方 那么还有project和package 这样的话其实就是 就是什么就是软件开发的人他用的最多了 因为他可以直接在上面发布一个软件包 然后我只是建议一个新的project 很多人来进行协作 但是对我们做 以数据分析为主的 就是科研工作者来说的话 我们其实用的这个比较少 然后大家可以看到最后有个starts 这个starts就是我 我给多少项目标新了 我收藏多少个项目 这样的话你可以看到我们这里 比方说有很多这个 我觉得很有价值的一些项目对吧 我就都把它收藏下来了 那比方说我们可以看到这里有一个 举一个例子就是这个open data 那么open data的话 实际上是耶鲁大学的这个 Yael Lieb Yael Lieb他实际上是一个很有名的认知科学家和心理 和心理学家 那么他这个open data就是说 他这里收藏了很多行为数据的这个 数据集 那么他自己并且就基于这个repository 建了一个网站 我们可以点开能不能看看 OK可以打开 那这个这里面就是一个一个的研究和 它对应的文章和数据集对吧 那么因为它主要是关于这个behavior data sets 所以在这个时候我们就能够 我感觉它应该是有价值的对吧 比方说我们上统计课的时候 可以去这里找找数据能不能用来做数据分析等等等等 这就是比方说这个 他的这个对吧 有20个人给他start 就表示说他这个被20个人收藏了 那么在心理学在我们科学界 就是说你其实一般的像没有多少人 给你start或是sort 为什么因为我们的主要是自己用 但是比方说这种 有很多这种比方说 我们看一下这个 这种大语言模型的对吧 然后怎么使用大语言模型的 那么这也是最近很火的对吧 你看那一下就是3k 那么3k的话在程序员里面根本也不算什么 对吧 你可能动辄100k什么的都都是有的 那么这是我们关于这个一个项目对吧 我们说具体的一个项目的时候 我们能够看到他的一个界面上面是什么意思 我们再回到刚才那个项目对吧 我们再讲解一下 在这个项目里面我们还能看到什么 这个是fork我们刚刚讲了 start我们也说了对吧 然后我们其实打开的时候 打开一个项目的时候 他给的我们这个地方是一个code 对吧 那么除了code以外的话 其实还有很多东西也是可以用的 比方说有pool request 就是刚刚的 比方说有人跟你协作的时候 他会给你pool request 然后还有actions 那么还有projects 还有security insight等等等等 还有一个很重要的就是setting对吧 就是说你是不是给你的设置是什么 比方说现在我们这个是一个公开的对吧 然后你可以把它改成比方说 这个private对吧 比方说在这个地方 你可以把它改成private或者是zoo之类的 然后还有你可以比方说有合作者对吧 你可以邀请合作者 然后你就直接可以add people对吧 就是说尤其对于一些private的一个project 那你就可以选择谁是你的合作者 那比方说像我们 有的时候我们可以 假如说你这个时候你跟导师 或者你跟你的同学同事是吧 你想想新建一个项目 但是呢这个项目还没有准备好公开对吧 你就可以直接给它做成一个 想想新建的在哪 在repository这里 然后点一个new 那么new这里 大家可以看到这里有一个设置对吧 一个是public一个是private 比方说你是private的话 绝大部分就看不到了 那是关于我们这个界面的一个讲解 我再回到这个界面 那么除了设置以外 还有一个就是很重要的时候 你看到别人的代码之后 你除了fork以外 其实你还有其他办法 然后这里有个code对吧 你可以直接把它下载为zip压缩文件 这是我们实际上之前跟大家提过的对吧 你们可以直接把我们那课程的ppt 直接下载成为压缩包 这是我们之前告诉大家的 还有这个地方你也可以 比方说修改它的一个描述 你想对这个项目加一些额外的描述 对吧 还有就这个地方release 比方说你这个实验 你预期你这个实验有多个阶段对吧 然后每个不同的阶段 你可以进行不同程度的公开 那这个时候你就可以比方说 我的第一个实验完成之后 然后我就给它一个release 然后第二个实验完之后 我再完成第二个release 第三个然后再做第三个 然后你每一个release相当于是你的 project的一个mind stone对吧 因为大家可以看到我们这个commit 可以非常的琐碎对吧 就像我刚刚就直接加了一个p柱 我也是一个commit 就这样的话 我可以可能有很多这个commit 但是有的时候你想 把一些最关键的一些更新对吧 一些时间节点你把它highlight出来 这个时候用release的话 就是一个非常好的一个办法 就像我刚刚说的 第一个实验完成是一个重要的节点 你把这个地方做一个release 那么它就会在你这个下面出现了 你下次直接点这里 你就可以回到 你当时完成第一个实验的时候 那个时候的状态是什么样 那么它还有一个就是滚回对吧 就是比方说你想回到 你觉得前面这个都没用了对吧 你想比方说把三月份的 三月份的这个对吧 第一个恢复到这个状态 你实际上也可以把它 直接就是把前面的所有的对吧把它撤销掉,当然还有一个更好的办法就是 你把它变成一个新的branch,我们这里大家可以看到 我们这里有一个GitHub的一个经典的标志 就是一个节点,然后分叉对吧 它就表示你有不同的分支 那么你就可以新建一个分支对吧 比方说你这个是你的主要的一个分支 然后你觉得从这天开始,从这时开始对吧 然后你希望再加一个分支,从这个地方开始 做一个不同的分支,然后这样的话你也可以 重新在这个地方加一个新的分支 然后在这个分支上面进行做新的修改 修改完了之后可能某一天你觉得两个可以合并了 你又可以把它合并到一起 所以这个是GitHub上面或者Git管理上面非常好的一点 就是你可以有一个同一个起点对吧 那是同一个起点 然后你做了几件事情之后对吧 你这个地方再做 然后你突然觉得我可以在这个地方 再开辟一条路出来对吧 然后又重新做 然后你甚至在这个地方也可以再重新开辟一条 一个branch出来 然后这几个可能比方说 你甚至可以是不同的人再做不同的branch对吧 比方说这个你就是主要的人,这个的话是另外一个人 这个地方是其他的,然后最后大家在某个节点上面 最后就合并了 然后这个工程可能就完成了对吧 所以这是GitHub上面很好的一个管理的一个功能 当然这里面可能是协助 但是比方说即便我一个人对吧 我可以用两个branch同时来进行 然后最后把它进行合并 但即便我们不用branch 我们就一个一个节点把它记录下来 我们也可以非常方便 我们来看一下刚才这个 我们可以点开一个commit对吧 为什么说很 它会高亮出我们做的修改 我们可以看一下 我们点一下这个test 有点慢 现在不能打开了 这个精彩会碰到这种情况 我看是不是网络上的问题 怎么就没有了 应该是吧 对 然后这个就是我们的形式 然后这个是我们的细节 然后这个是我们的编辑 我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 然后我们的编辑 好 我们再刷新一下 大家可以看到我们这个地方 我刚刚做了修改对吧 它会把我修改的地方全部用绿色表述出来 我实际上就在这个文章上做了 第一增加了一行 第二个在另外下一行里面 我写了一行字对吧 它会把我所做的修改全部写出来 当然这个是绿色的表示你增加的 红色的表示就是你删减的 它都会给你标出来 这样的话你其实很容易就看到 每一次更改当中你到底做了什么 然后你的所有做的记录 我们都可以在这个commit里面 我们都可以找到 大家可以看到这个就17个commit对吧 每一个你都可以找到 我们这是对Github上面的一些介绍 那么我们现在要回到我们自己的电脑 就是看你我们如何来使用它对吧 大家现在都注册了吧 都下载Git了吧 还有一个就是这个是一个小功能 就是说它会记录你哪天有写代码 哪天没有写代码 就是这个上面你写代码 然后有commit它就会记录下来 比方说颜色越深表示你commit越多 你颜色越浅表示你就是没有怎么写代码 反正它会记录了 它其实会记录很多 所以大家也可以做自己的一个 看一下自己写了多少代码对吧 OK那我们现在 接下来假如说我们最重要的功能 最重要的功能就是我们如何 就是把这个东西在自己的本地上面建起来对吧 然后这个地方我刚刚跑完了 我这个Git改了这么多东西呢 然后我可以不用 就是说假如说大家这里敲这个Git对吧 然后它不会说你的这个Git没有命令不存在 基本上表示你有效果了 那么假如说你之前从来没有 没有见过 就是说你没有在自己电脑里面使用过Git 它会报错说你的这个 你这个文件夹没有任何的Git相关的一些记录 或者是输入之类的 那么我们怎么做 就假如说我们还是以刚才的这个为例子 以这个以这个我复合过来的这个为例子对吧 那么大家可能可以直接以我们的这个 大家可以直接用这个为例子 就是说因为你复合完了之后的话 你就可以在这里做类似的操作 因为这就是你自己的项目了对吧 复合到你这里了 大家可以看到这个code这个地方 它除了有这个download以外 还有一个第一个对吧 第一个实际上是它推荐的一个做法 就是用叫做SSH的这个去clone对吧 它这里有个小问号 大家看到没有 我们可以点一下 它实际上就是告诉你 如何去把一个在线的远程的一个东西对吧 把它copy到你本地 那么假如说我们之前 我们可以看一下 在R这个地方 我先给大家看一下 我这个文件夹长什么样 我这个文件夹基本上就是我们Github上的内容对吧 大家可以看到没有一个叫presentation的文件夹对不对 一个都没有对吧 那么这个时候 我再回到我的这个代码上面 假如说我就想把这个孟哲的代码 我把它copy到我本地对吧 到我自己电脑上面去 那么我把这个地方的代码copy下来 它实际上这个地方有个小间谍 就是有一个copy的一个按钮 你点一下就它直接就复制了 那么这个时候我在这里 你要看到自己的这个路径在哪 比方说我就写git clone对吧 然后直接粘贴我刚才的这个路径 它这个地方实际上是什么呢 就是我在远程上面的Github上面的路径 然后以git结尾 然后按下回车之后呢 它就开始clone对吧 然后这个时候 大家可以看一下 我这里就新增加了一个文件夹对吧 那就是我刚才的 有点问题啊 OK我明白了 这里会碰到一个比较 这个地方我在课上讲的话比较花时间 但是实际上是大家使用Github的时候 经常会碰到的一个问题 就是你的安全验证的问题 也就是说实际上你在这个地方 大家可以看到这个是一个很典型的一个报错 就是说你现在本地的电脑 你跟Github要建立一个连接对吧 它建立一个安全通道 它要用SSH建立一个安全通道 那么有一个安全通道的话 就意味着你像有一个叫做credential的一个东西 就是类似于密钥对吧 也就是说你需要 像Github你自己的那个账号 因为我是从哪copy 大家可以看到 我是从我自己的账号里面去copy一个东西下来 那么你实际上是要在你本地的电脑 和远程的Github里面 你的账号之间你要建立一个连接 要建立连接的话 你就需要有一个安全认证 不是任何一个电脑都可以连上去 这样的话要不然的话 每个人都可以直接去你的账户里面 去copy你的东西 你必须要去做这么一个安全的验证 那么这个安全的验证的话 一般就是使用SSH这种方式 来进行安全的验证 那么应该是2019年 2020年的时候 Github做了一个更新 就是对它的安全的证书 我们可以这么理解 对它的安全证书做了一个更新 更新完了之后 以前的这种老版本的 你以前比方说 把你的这个电脑 跟这个Github建立一个连接了 对吧 但是呢 它更新的时候 你这个电脑没有更新 你就随着错误 它会告诉你 你这个账号是不是被破坏了 然后但实际上是没有 是因为Github本身的更新引起的 那么这个要去怎么做呢 这个实际上是要去看 这个Github里面的一个 它的这个教程里面的 很重要的一个点 就是如何进行安全的认证 我看一下 当然对这个问题最简单 其实你就是把它copy下来 然后去找问题就可以了 因为这个地方比方说 它的这个错误是 这个其实是关键的错误 就是说它叫做 Hotkey Verification Failed 就是这个热键验证错误 对吧 其实我一般的做法就是 直接去直接去Bing上面 就是Google上面去搜索 当然其实你现在用 Chart GPT的话 你直接可以用Chart GPT 我这个是比较Old School的做法 它就会告诉你怎么去 去解决这个问题 然后你就去去搜索一下去解决它就好了 那么一般来说这种验证错误 实际上是非常常见的一些错误 大家习惯就好了 我也经常会碰到 我这里的话就相当于是文件夹 copy进来 但是因为我安全验证的问题 它现在是不让我打开的 那不用开删赛制 你要按出TDP啊是 这个都可以发的 怎么可能呢 你在自己的账户和你的电脑之间 要建立一个安全链接的话 肯定不是说你这里的一个 用什么方式验证的问题 不管你用什么方式 你都要把安全验证的 就是验证的方式要对上 现在是验证方式出了问题 而不是说你用了什么通道的问题 因为我这个电脑已经很久没有用它 在GitHub上面进行 进行数据传输了 没有遇到过是吧 遇到过是吧 对 对我这里的话我们就不在这里讲了 就是它确实会花一点点时间 它是一个比较常见的一个问题 它不难但是就是花时间 那么假如说我现在自己对吧 有一个特定的一个文件夹对吧 比方说我在这个地方我新建一个文件夹 然后我就要test git 那么在这个文件夹里面 我希望在这里面开始我的一个项目对吧 然后我需要做的就是首先 当然要把我这个路径改过去 这个地方大家看得看到 这个地方用的不是R代码 这个地方应该是在Terminal里面 所以说要看你的Terminal用的什么代码 一般Terminal是用的share或者是 中文之类的代码 但这个很简单就是改变路径 对吧 这个cd以上很多代码都是用cd 叫change directory 我看一下我 比方说我就改到test git里面 我现在在test git里面对吧 那么这个时候是一个新的文件夹 我看一下git status对吧 看它的状态 它会告诉我一个错误就是叫做fatal not a git repository对吧 这什么意思呢 就是说你这个文件夹实际上 并不是一个github repository 那么我们这个时候有两种做法 我们第一个地方就是说 我们先在github上创建一个repository 然后说我们回到自己的页面对吧 在repository这里面 然后我创建一个 比方说new 然后我就是一个公开的对吧 就test test git 然后我就点创建对吧 创建完了之后它会告诉我怎么做 这是github非常有意思的一点 它其实也是后面增加的 看到我们一般就是使用的第一个 比方说我们可以来讲一下 它这里面到底是什么意思 这样的话可能大家后面都比较方便 我们讲全代码版了 不讲desktop版 第一个就是说你在这里 你要把新的repository 和一个新的文件夹建立一个连接对吧 你首先要把进入到你想要放的文件夹目录 实际上就是我们刚才做的这一步对吧 就是把我的当前的目录 更改到我的目标文件夹 我本地的目标文件夹 然后它再告诉我 你需要这个叫做echo test approach test git然后什么什么 这第一步是什么 就是用Terminal的一个任务 去创建一个叫做readme.mp的一个txt文件 然后并且在里面写一行 就是一个警号或者test git 这就相当于是什么 创建一个readme的文件夹 就是对这个文件整个进行说明 然后你可以忽略这个 因为你可能不需要 然后就直接给init init就是说你在这个文件夹里面去 创建一个新的文件夹 当然我们可以完全follow它 这样可能是更保险的 我们就直接完全follow它 我们直接粘贴过来之后 它实际上就是一行一行的在运行了对吧 我这里应该有可能还会出错 对 在这个地方其实并不是说我的 Column还是什么的问题 就是我实际上并不能跟我的 远程的Repository做一个对话 为什么呢 因为这个交互的验证是失败的 所以这个地方它又会重新出现这个错误了 这个验证的话 对于我这个电脑要跟DataHub进行验证的话 至关重要 如果说我不能解决这个问题的话 我这个电脑就没有办法跟DataHub进行通讯 所有的我们后面讲的所有的功能 都没办法在这个电脑上实现 但是因为我平时不怎么用这个电脑 所以其实没有关系对我来说 那么完了之后我们可以看看 这个文件夹里面发生了什么东西 大家可以看到这个地方有一个readme对吧 就是我们刚创建的 还有一个隐藏的文件夹我们可以看一看 在Windows里面它实际上有一些 我们平时用Windows它会把我们 就对电脑的认识会大大的简化 它会把很多隐藏的文件都隐藏起来 看到没有 在这个文件夹的选项里面有一个叫做查看 这个标签 查看里面的话 其实它会有很多默认的选项 有的时候这些默认的选项并不是我们需要的 比方说大家现在很多时候 连这个文件夹的拓展名对吧都不知道了 为什么呢 就是因为Windows直接把这个拓展名都给隐藏了 然后你都不知道你这个word文档 到底是doc结尾的还是docx结尾的 对吧 因为它可以全部隐藏起来了 如果说我们把这个 把隐藏的文件显示出来的话 大家可以看到这个地方它实际上有一个 叫做.git的一个隐藏文件夹 这个里面就有很多这个东西 那么这个隐藏的文件夹就是git来 给我们进行版本备份 以及对本地的git相关的版本备份 进行存储的一个文件夹 那么假如说大家 能够建立自己在本地的电脑跟GitHub 之间建立一个连接之后 你后面就可以直接在 就可以开始我们后续的一些内容操作了 那么我们可以 我看一下后面内容 对这里的话是用我们这个PTT上 说是用了GitHub desktop 如果我们用RStudio的话 其实没有必要用这个 没有必要 当然大家如果特别喜欢用这种GUI版本 你可以登录之后 你再在上面点点点 看自己的报道有多少项目 之类的你也可以用这个 但我其实不太推荐 对这里就是我们刚刚说的 你把你隐藏的项目显示出来 然后这里有个半透明的git git的话实际上就是会记录 我们每一次的修改 然后我们可以创建一个readme对吧 这里的话实际上我们可以直接 新建一个文件夹叫readme就可以了 然后这个时候 这是在GitHub的desktop里面 它会告诉你你这个地方 会有一个新的更改了 你新增加了一个readme的文件 那么你可以直接把它加入进来 然后commit这个地方 就是比方说加入你的描述 那么在我们的这个地方 在代码里面 我们一般就是用git status 这个地方因为我们没有电力连接 所以实际上没法判断到底 我们电力连接之间有没有关系 实际上我们理论上如果说 可以连接电力的这个连接之后 它应该告诉我们 我们新创建一个readme 因为我们前面已经创建了 然后一般来说我们还有一个 常用命令就是git add 然后你想把这个readme 放进去对吧 你就把git.add 就是把这个文件夹加入进去 就是第一步像是git status 然后检查命令对吧 检查你的状态 然后第二个就是把你新增的命令 做了更改的 或者新增的这些文件夹 用add这个命令加上去 然后你就可以第三个命令 最常用的就是commit commit就是说你记录一下 你这次做了什么 git commit 然后就是m m表示你的commentary 然后后面加一串字符 一般来说是用一个冒号 比方说我们就是test 或者就是add readme 对吧 然后一般来说它就会显示 这个地方增加了 因为我这个地方 验证没有通过 所以它会显示说 其实你不需要增加对吧 然后你就最后有一个git push 就是把你的现在的更改 推到网站上面去 当然我这里可能也 它也会告诉我不需要push 那么最常用的 大概就是这几个步骤 就是git status 然后git add 然后git commit 然后最后git push 然后如果是你远程的做更改 你要想把它从远程拉下来的话 你就是另外一个命令 就是跟push相对的 就是git pull 就是把你远 比方说你在远程上面对吧 你从别人那里fork了 别人的更改了之后 你把远程的更改 更改之后 你想把本地更改的话 你就用git pull 就是拉下来 push就推上去 对吧 你就想那是你的一个仓库 对吧 你现在手头上一个东西 做好了 你把它推上去 然后那个上面改了 你把它拉下来 就是这几个命令 这就是最常用的几个 命令 然后在R里面 全部都是可以实现的 就相当于是 如果我们完全依赖于R这个系统的话 我们全部可以在R studio里面 我们不需要跑到别的地方去 那么在AMPPS 就是杂志上面 有一个应该是专门介绍了 如何在R里面进行git的操作 大家可以建议去看一下 我们休息一下 我感觉好像讲了很长时间了 我刚在这个 腾讯的会群里面 我发了一个链接 就是我刚刚提到的一篇文章 大家可以相互传一下 它实际上就是告诉我们 在R里面如何来使用github 并且它会介绍了更多 关于version control的一些东西 大家不要小瞧这些东西 就是说你要想 特别是对于以后有志于做科研的同学来说的话 你真的需要好好地去把这些技术的细节 慢慢地克服 也不是说你要今天晚上就全部搞定 但是你可能需要花时间慢慢把它搞定 为什么呢 就像我刚刚说的 它实际上是全世界的数据分析师 软件开发者共同的一个community 你自己要想在这个community里面 就是说生存或者说在这里面 找到一个自己的位置的话 你必须要去做这些事情首先要去了解他,对吧,你连 就是说账号都建不起来,然后没办法把自己电脑和这个远程的这个账号机连接 那你怎么能说你在这个Community里面呢? 刚才这个同学就是 叫志强,志强刚才他去试了一下,我觉得应该是有很典型的几个错误啊 或者大家会初学者都会碰到的 我们刚才说在这个地方 我点开一下,我们把这个地方全部贴下来,对吧 我们可以看到他这里一行一行的代码 第一行就是说我们要创建一个Redbit的MD文件 MD文件比TXT更好一点,就是它的格式化更好 第二个就是Git init,就是我们在本地的文件夹去initiate 这个Git的一个项目 然后我们通过这个Git add,就是把我们刚才创建的这个Redbit文件加进去 这个时候加进去只是说 我要加,但实际上并没有贴到远程 然后Git commit,就是说我要在这个地方做一个记录 我前面加了一个Redbit对吧,我要把这个动作给它一个 一个Label对吧 我们记录一下这个动作我们以后怎么去 给它一个什么名字,叫Quest commit 大家可以取别了 然后Git branch,就是说你现在这个分支是哪个 因为我们建了一个GitHub repository之后 一个分支就是主要的分支对吧,就是一个Branch就是Mail 它现在是叫Mail 主分支,它以前叫Master 所以你看到以前现在很好的项目的话,它都是Master 就是这个地方你要知道 如果你Fork以前很好的项目的话,这个地方是Boost fail 它可能主要的分支是Master 然后Git remote end,就是说你这个时候 你文件夹里面,像是你本地的文件夹里面 你写就是说你开始的一个地址的一个文件夹 你这个时候要告诉它,你的远程的这个Repository是哪一个 远程网的地址是什么对吧,你把这个地址加进去 OK到这里都很顺利对吧 然后有可能这个时候 在这里面的雷,它会告诉你,我不知道你是谁对吧 就是说我不知道这个地址,它不知道你的这个 目前使用的这个终端是属于哪一个GitHub用户的 它会告诉你,你要用这个Git Configuration 就是Config那个,把自己的邮箱和用户名输进去 你像是你这里,我们当时Git的命令实现它是什么呢 它有一个背后是代表这个叫做Global Configuration 就是说是谁在使用这个Git的命令 对吧,你第一次使用的时候,你肯定要把自己的用户名 和用户名的邮箱输进去对吧 用户名和邮箱输进去之后,你最后 把这个添加了对吧,然后最后push的时候它才会试错 它这个时候告诉你,这个地方是什么呢 就是你这个电脑 跟你的账号之间,不要建立一个安全的连接 那么这个网站上面 孟真你可以找一下,然后发到 或者我们哪个资料发到这个群里下 那么它会告诉你,你需要去 比方说完成几个命令,在本地上生成一个key 然后同时把这个key放到你自己的 这个settings里面去 然后这个settings里面对吧,这里面有一个 就是 开发者的 开发者这里面的话,就会有一个 就是我们叫做Personal Access Token 就是你的这个token是什么 那么我们以前实际上是用的是这个 Kerasco对吧,就是经典的这个token,它最近其实更新了 可能安全性又增加了 所以可能有新的这种token的方式 那么总之就是说 大家可以看到我这里就有三个token,表示呢 我自己的这个账号实际上跟三个机器建立了这个安全的连接 这样的话我在那三个机器上,我使用的时候 我就不需要再输入一系列东西了 明白吗 就如何把这个地方 这个token和自己的电脑建立连接这个地方 大家在网上应该能够迅速的找到这个教程 我在这里就不说了 但是如果那个教程里面没有告诉你要进入这个地方的话 那肯定那个教程就是不对的 OK 那我们前面讲的是Git 我们也讲了Git的这个功能对吧 就是最常见的 重复一下最常见的几个功能就是Git Status,检查一下你当年的文件夹有没有变化 第2个就是Add,第3个就是Commit Add就是把你当前的改 就是做了变化的东西,添加进去 然后Commit就是你这是添加,你这是改动 你给它一个什么名字,给它一个什么描述 然后最后就是Push,就是把它推到你的 在GitHub上面这个Reposter上面去 然后如果你要从远程拉东西的话就是Pull 好像有一个 这个之前徐廷老师推荐给我的叫做 Oh shit,GitHub,还有什么 我不知道 实际上基本上程序也不会去天天记那些命令 因为是记这些命令实在太无聊了 这个是 所以在网站上其实有很多关于Git的使用的指南 是这个 因为你使用GitHub的时候经常会想 经常会想对吧,我怎么又出错了 那它就会记录很多出错的这种解决方案 它这里会告诉你这个就是怎么去解决一些东西 所以这个也是大家可以收藏的一个网站 然后大家可以去记录一下自己平时使用GitHub的时候 经常会使用哪些,经常会出哪些错误 然后把它用一个笔记用个电子笔记录下来 因为你GitHub的错误一般你不会只犯一次的 我个人的经验经常会犯同样的错误 所以你为了避免自己总是找的你就把它记录下来 我今天犯了一个什么错误,我用什么办法解决了 然后记录到这个小本门上面 然后下次碰到同样的错误的话 你就直接翻你的本子电子笔记就可以了 要不然的话你每次找的话其实挺浪费时间的 而且当然你用其他的GPT可能也可以 但是需要你给它输入合适的错误信息 比方说你一般输出的时候它会输很长一段信息 你要找到哪一段是关键的信息 它才会给你正确答案 像比方说我们这里的话 它其实最关键的信息是什么 就是你看它这里说什么 someone is doing something nasty 就是说是不是有人把你的东西给盗了 但实际上并不是这个原因 你应该输入比方说 offending RSA key 还有什么host key verification field 输入此类的一些关键的 要不然的话你这很多信息你输进去的话 它不一定能够找到最合适的解决方案 好,那我们Github就先讲这么多 然后大家肯定会碰到很多错误的 但我希望大家就是在接下来的几周吧 先用一下 然后我们到下周的时候 下周的时候复制一支小作业 来考核一下Github是怎么样 这个作业倒是很简单 就是指定一个项目让大家做一下 然后做一个小题 然后pull request 然后这样的话每个人你们做了什么东西 你们能不能pull request 就一目了然 因为我们会是一个公开的项目 OK 大家最近先练习练习 有问题找助教 然后我们花了很多时间讲Github的管理 然后我们自己本地上的文件怎么管理 其实也是一个有一点技巧的事情 那么这是我们科技组采用的一个管理的方法 我们实际上是从类似的这些网站上学习 我做过structure 那么这个实际上是叫我读博士的时候 我发现当你的项目越来越多的时候 你会发现你用自己这种 我们说这种野生的方式去管理文件的话 你会发现没有什么规律 而且你这个自己管理文件夹的方式 你跟别人的是没有办法兼容的 你要把这个东西分享给别人的话 你要做很多额外的解释说明 那么有没有更好的方式呢 实际上是有的 并且有人专门有很多网站 专门教你怎么去把自己的文件夹进行结构化 那么我们现在我们自己组里面采用的方式就是 有实际上就是123456 就是有6个文件夹 那么上面有一个叫做root 就是有个根目录 那么也就是说 所有的一个项目相关的一个文件夹 我们就统一的把它放在一个文件夹下面 那么对于不同的 我们大概就可以把它分成几个步骤 就是在实验站之前有一个proco或者是有个prozo 然后我们的这个文件夹是针对meta research 待会给大家讲一个例外的 然后我们这个meta research的话 有文献的检索对吧 然后文献的选择文献的筛选这些选一个 然后数据集取那么在原分析当中的话 这是一个很重要的步骤 然后最后就是数据分析 然后最后就是report 那么每一个步骤的话 你就可以存放相应的东西 那么我们整个Icon的话 你就应该放在这个analysis里面 然后report的话你可以放自己的文档 可以放你参加会议的海报摘要 你可以放自己在组内报告的PPT 就都在report里面 然后所有关于运动测试的东西 你就全部放到这个proco里面 这样的话你所有的东西 在哪个文件夹里面找 你都应该非常清楚 那么在这个根目录下面 你可能假如说你跟GitHub进行连接之后的话 它还有一个.git的一个隐藏的文件夹 还有一个git.log 那么这个git.log是非常重要的 我们在把自己的项目上传到GitHub上的时候 我们不想把所有的东西放到上面去 尤其是当我们的原始数据 没有进行很严肃的清理的时候 没有进行很严格的筛选的时候 我们并不想把它上传 或者我们的报告 比如说里面有PPT可以分享 但是呢,里面的文章对吧 我写了一半的文章我不想分享 这个时候你就都把它放到这个.git.log里面去 让Git把它忽略掉 不要上传到GitHub里面去 这是非常重要的 我其实用了GitHub一年多 我才发现GitHub有一个.git.log这个东西 所以我当时的方法就是把这个东西搬出来 然后单独的管理 这个其实很费劲 后来发现有这个东西之后 太好了,就是什么都可以放在一起了 然后这个就是MD 或者TXT都是可以的 那么这个是protocol对吧 这是助教 助教这个 孟征他自己就现身说法 就是直接弄了一些自己的文件夹的截图 大家可以看到上面是protocol对吧 就是这个 一个 研究设计 那里面就会比方说有预注册 然后plan analysis 每一个文件夹下面都有一个about 就是说都有一个关于这个文件夹的说明 那么另外一个比方说 这个literature search对吧 你怎么去找到这个 比方说做原分析的时候 你可能不仅仅做了一次原分析对吧 你可能进行了多次原分析 那么这个多次原分析的话 多次文件的检索输出 那么你可能就按照不同的时间对吧 进行一个排序等等等等 那么一般来说的话 这里面都是PDF 可能不需要上传GitHub 一定要放在一个load里面去然后你的文献的筛选的过程对吧 那么你有可能会把它放到 当然你有可能用其他的方法进行文献筛选对吧 那么你也可以用其他的工具 那么这个时候就是你所有的筛选的过程就放到这里 然后原始的数据对吧 比方说数据提取之后原始的数据是你自己能够内部看的 然后open data就是说你可以放开给大家的 放到GitHub上面的话对吧 诸如此类的 然后最后你的code 你这个analysis的code你就自己 相当于是这个地方的话 实际上你是已经 我们可以回到前面 这个地方你有一个预注册的一个计划的分析对吧 那么这个地方的话你是正式的分析 相当的话你会在这个地方又重新有一些新的代码 有一些更改等等等等 这个地方你可以同步的去存放 然后最后的话比方说这个reports的话 你只要把它写清楚就可以了 这个reports就没有什么特别的 比方说你可以存放你不同的时候报告的 然后你也可以存放你某一次开会的PPT啊 或者什么的都可以 那么文件夹的话 这个我是非常同意的 就是你不能让看起来好像很整洁 里面的话其实很乱 这个就是说你要不时的去对它进行清理 因为只要你的文件夹你不用心去整理的话 过一会儿它肯定会乱 因为你肯定想我这个时候就随便新建一个文件 就放在这里了 那么因为它很快 你立刻就可以把想的文件解决掉 但是这样的新的文件夹增加一段时间之后 它就会变得很乱 所以一定要定期的进行清理 然后定期的进行 并且也相当是有一个外溢 至少在我们科技组的话 每学期会让大家汇报的时候 都会让大家汇报 一定要汇报你所讲的结果现在是怎么样 要不然的话你这一学期不整理 两学期不整理 等你毕业的时候没法看了 还有另外一个我刚刚给的是这个 语言研究的这种文件夹 我们科技组还有另外一个文件夹结构 看一下 我删除了吗 是在这个data里面想起来了 那么对于这种实验性的话 我们基本上差不多也是类似的一个结构 比方说第一个 一般我们做一个实验的话 可能一般不会只做一个实验 当然也可以只当它是一个实验 比方说你就是有个三层文件夹 第一个就是protocol 第二个就是共同的实验 然后第三个就是repost 看你最后有几个实验 每一个实验里面的话 每一个实验你可能有一个关键的keywords 就是说表明你比方说第一个实验 你是做了什么 调节某一个关键的变量对吧 第二个的话你就调节另外一个关键的变量 你这样的话方便自己识别 然后在每一个实验的研究里面的话 你会有一个自己实验的protocol对吧 然后你有自己的材料 然后原始数据 然后分析的数据 那么以前的话我会在这里增加一个 叫做一个media data 但是我现在就直接把它放到analysis里面去了 因为这样的话会更方便一点 在这个分析里面的话 比方说大家可以看到就是有这个 data就是叫做standardized data 就是说你的原始数据可能是没有什么结构的 但是在这个分析的里面的话 你可以把数据整理了之后放在这里 就是里面是比较干净的 结构比较清楚的 甚至可以直接公开的那种原始数据 然后下面就是你的这个scripts 那么有的时候你可能需要临时存放一些中间的数据 你也可以把它建一个文件夹 但是你也可以直接把它放到这个scripts里面 那么每一个文件夹的话 那这里就少了一个readme 其实每一层文件夹里面都应该有一个readme 比方说这个reports的话就是有 比方说有这种project reports 在我们课题组的话就是你的每学期的汇报 然后preprint就是说你最后做完了之后 你要不要做一个preprint的预印本 然后conference就比方说 全国信息大会对吧 你去报告一次 然后另外一个什么会议你又去又报告一次 然后最后你的完整的manuscript就诸如此类的 这是我们实战研究的一个template 但是每个同学可能会根据自己的对这个文件夹的理解 根据自己项目的特点会做一些更改 我看一下这里 然后还有一个就是这是文件夹的结构对吧 那么除了文件夹结构很重要以外 还有一个就是大家的文件夹的命名 其实也是一个很关键的一个点 这里好像没有什么文件夹 没有什么文件 但是文件的话一般来说 你需要让这个文件名第一就是很有规律 第二就是有足够的信息 可能大家会有不同的视角 比方说像我们现在即便是我们的课题组比较小 但是我们也会我会收到不同同学他给我发的文档对吧 那么假如说每个 比方说我们就不说课题组同学了 就说这个本格生证毕业论文吧 每个本格生给我发的论文都是叫毕业论文 那我怎么知道到底是谁的毕业论文呢对不对 而且没有版本信息 而且有的时候大家发邮件连邮件的标题都没有 然后邮件的署名还是一个网名 对吧那这种的话其实你从老师的视角来看的话就是很痛苦 你都不知道到底是你要必须要点开那个文件夹以后 你才知道这是谁的 那么为什么大家其实大家可以比方说 在文档这个上面你就可以直接比方说谁是谁对吧名字 然后毕业论文对吧 然后你甚至可以把毕业论文的关键词字一对吧 放在标题上面 然后最后日期或者是什么版本 然后这样的话实际上我只用看这个文件的名称我就知道 这是谁的论文这是第几版 然后这个文件的标题核心的点是什么对吧 所以这样的话对于大家的交流来说都是非常有效的 那么这个原则基本上是应用于所有的我们的这种命名 不仅仅是你这文件的命名 包括你自己的代码的命名对吧 你代码也就是 比方说新建代码1新建代码2新建代码3 你最后其实你自己根本就不知道 哪个代码里面写的什么东西对吧 所以这个代码的文件的命名本身也要非常的清楚 然后关于代码的管理 我们提到代码的管理对吧 那么代码的管理的话实际上也是需要大家去 稍微花一点心思去把它考虑怎么进行组织的 我们之前跟大家说过最好的方式就是你把所有的 关于某一个项目的分析都把它放在一个文件夹里面 并且新建一个up project对吧 就像我们这门课就一个up project对吧 这个up project大家就可以直接双击打开之后 所有的东西都在这里面 看一下现在几点了 我们就继续讲R代码相关的管理 这个up project我们之前跟大家介绍过对吧 如果说你有一个新的项目 那你就最好新建一个project 然后它在R里面的话 R studio里面就是file对吧 文件然后新建文件新建项目 然后你可以一般来说的话 你就可以直接去打开某一个文件夹 你可以新建一个文件夹对吧 就是从一个已经存在的文件夹里面去创建 然后打开之后的话它就会显示这里面所有内容 而且它会自动帮你创建一些隐藏的一些文件 比方说我们可以看一下我们这个课件对吧 我们这个课件里面有哪些隐藏的 如果你不把它显示出来的话它会有 比方我们这里有个git对吧 有一个up project.user 这个实际上就是up project的一些隐藏的文件 那么还有一个.gitignore对吧 这个实际上也是会被隐藏起来的 还有一个rhistory.rhistory 如果你不去仔细的 你不把它显示出来的话它也会被隐藏起来 那么在up project.users里面的话 它实际上就记录了很多关于up project的内容 那么有的时候可以相当大 我们可以看一下比方说它这个里面 这个很小这个只有120K 但有的时候比方说你在里面存放了很多东西 比较多的话它可能会很大 那么创建了之后的话 后面就一切都放在这里了对吧 然后另外一个就是说我们最好使用 R Markdown来写这些代码 R Markdown它这种代码输写的方式 又叫做文学式编程叫做literature programming 就是你可以把自己的文字和代码进行混合编写 那么为什么我们不使用直接使用R script 就是R的脚本 因为它代码你要把它进行明确的分割的话 会需要花很多功夫会很乱 那么你比方说创建的时候 你就可以创建某一个特定的 你就创建一个比方说document对吧 然后它的输出的话就是HTML 就是它默认的这种网页 网页输出的话会比较好 然后这里的话又会涉及到文件夹文件的命名对吧 那么文件命名的话有的时候 有几种不同的风格 就是我刚刚说的比方说你可以命名为 名字对吧 然后下发线 然后比方说关键词 比方说有关键词1对吧 关键词2 然后最后比方说 比如说V1对吧 或者V0.1 然后点什么 就是最好不要有点 就是我建议就是最好不要有点 然后你要是0.1的话 你就是V0 V-0-1 就是下发线这是最好的 最好不要有风格 所以有另外一种方式就是这里说的就是这种叫做 叫做陀螺式的大小写 大家可以看到我这里全部是用这种下发线来做分割的对吧 但是你也可以直接就比方说 keyword对吧 这个key是大写的 然后然后第二个也是一个 K1 K2对吧 它就是这个地方每一个词的开始的地方 大写 其他地方是小写的 那就是也可以用这种方式 最好是不要有空格为什么呢 绝大部分的时候在R这个生态系统里面 有空格好像不是大的问题 但是我觉得形成一个良好的情况就是说 你有可能会使用其他的代码 比方说你有可能 要分析某个数据的时候要使用MathLab 或者使用另外一个东西的时候你要使用Python对吧 那么在MathLab里面的话 你有空格就是会有问题的 所以建议大家就是说形成一个好的习惯 你要么就是用下划线 要么就是直接用这种 没有任何的空格的这种方式 来去命名你的所有的代码 那么RMarkdown打开的话大家可以看到 这个地方它会告诉你 你的这个文档 它有一些很清晰的一个格式对吧 它会有一些视力内容 比方说最前面的就是一个 我们说title的部分对吧 就是title页对吧 前面有这个文档标题 然后作者然后有日期 然后Output的形式 这个地方是可以加很多东西 我们后面讲Hotkey的时候会再讲这个东西 另外就是你的输出的形式是什么 然后它会告诉你 这是一个RMarkdown的文档 然后Markdown是什么什么什么 然后它会告诉你 你这个文档的这个格式是什么 然后它会告诉你 这个文档的这个格式是什么 然后它会告诉你 这个文档的这个格式是什么 然后它会告诉你你怎么写代码,这里面实际上就是我们在做 刻件的时候,我们基本上都是用了R Markdown的文档 我们可以来看一下,当我们R Markdown是为了做PPT 所以它有自己的特殊的这种形式 然后说三条线表示就是分割不同的PPT的页面 然后的话,大家可以看到这里就会有三个尖号对吧 我也不知道它的中文名叫什么 就是尖尖的这种,在我们一般在EST退出的这个键的下方 它跟波浪号是同一个键一般来说 美式的键盘下面 然后它三个波浪号代表的实际上就是代码 就代码块 那么代码块的话,你可以指定它的代码块的语言是什么 比方说你可以用大括号,然后加一个R 就表示这是R语言对吧 然后R语言后面是什么,就是这个我们说代码块 chunk对吧,这个chunk的名字是什么 就你在R语言,第一个大括号的后面的第一个字母就是 你用了什么语言,比方说 可能在其他地方也可以用Python或者用什么Junior 或者用C++怎么都可以对吧 但是因为我们是用R语言,所以我们这里一般都是用R 然后你这个chunk,R后面有个空格 然后就是你这个chunk的名字 然后后面有个逗号,逗号后面表示说你对这个chunk要做什么样的设置 在RStudio里面比较方便,它这里有个小齿轮 就表示说你在这里可以使用一些对这个chunk的options 进行一个选择对吧 但是我们实际上也可以直接用代码来控制 比方说这个echo,就是说你是不是把它显示出来 然后这个是代码框的部分对吧 那么还有一个部分就是文字的部分 大家可以看到我们这个地方也是title页对吧 然后就是文字,就很多这种就是我们书写的内容 那么这个书写内容就完全按照markdown的语法 这个markdown的语法其实它就是一个怎么去调这个格式 最常用的几个我们基本上都可以看到 第一个叫井号,井号表示就是标题 一个井号空格写文字表示一级标题 两个井号空格再写文字表示这个 两个井号后面是二级标题那么依时累推 然后另外一个就是这个点 就比方说你有一个这个点对吧 这个乘号的这个点 然后乘号的这个乘号我们就说不说点了 就乘号空格后面表示你就是bullet point 就是你那个我们在在pvt里面就会显示 前面一个点后面有这样的一个格式对吧 然后另外一个就是写公式的 就是两个美元符号中间夹的就是公式 大家可以看到我们这里是形容的一个 你把鼠标放到这里它都会显示对吧 这个地方是alpha 那比方说这个地方我们可以看一下 它会显示这个你两个美元符号下面 显示是什么那么这个是H1对吧 那么H1的话它下面是有一个协体的 所以这里基本上就表示是说 我们两个锦号中间的就是公式 那么公式的话它基本上是使用的LATAX的语法 那么大家可以不用记那么多 你用到的时候你再去查就可以了 就是两个锦号的这个公式它实际上对我们来说是非常方便的 如果你需要写大量的公式的话 它会比你在word里面一个一个去插那个公式要方便很多 然后就是这个加粗 加粗就是两个这个称号 左边两个称号右边两个称号中间的文字就会被加粗 然后左边一个称号右边一个称号它就是协体 就诸如此类的这个就是一些markdown的语法 那么大家可以感兴趣的就会慢慢去熟悉它 不需要今天就说我把它全部记下来没有必要 你可以慢慢去在使用的过程中去学习它 大家可以看到我们这边的所有的我们前面几期的PPT对吧 全部除了第一章第二章以外 我们后面全部都是RMD的 接位的这个文件实际上我们就一直都是用Rmarkdown来做的这个PPT 这就是我们这一课了 那么你建好这个Rmarkdown之后 你可以把它存在你当前这个目录的下面 对吧你最好是就是把这个名字存好 这样的话你可能就像我们说刚刚说的这个命名 你要命名清楚 那么我们刚刚说的这个code对吧 就是代码框就是用三个箭号表示代码框的结束 然后这个大括号对吧 大括号的话表示这个chunk里面用的是什么样的语言 然后逗号的话就表这个chunk里面的一些设置 然后最右边的三角你就是可以直接运行整个chunk 就这个地方大家看到没有这个地方有个三角对吧 我们也可以看到这个地方也是一样的 我们在这里有很多这个chunk 然后我们可以我们回到第一个chunk吧 要不然会出错 然后第一个chunk对吧 这就是实际上是我们的一些设置 我们可以点一个点这个三角符号 表示它会运行整个chunk的内容 我这里没有装这个td这个包啊 所以它很快就出错了 比方说我们这里可以 read data对吧 当然这里也没有这个userdata.csv这个东西 所以它也会继续报错 但是大家都已经熟悉了 然后你可以设定一些option 就是说比方说你要不要用科学技术对吧 然后是不是要把这个dataframe转成data table等等 那么最好的话 就是说写代码的时候一个非常好的一个practice 就是要写注释 很多初学者会觉得注释有什么用 我自己写的代码对吧 我都记得呢 但是你一个月之后 你可能在看这个代码的时候 你不会这么想 就是你要每一个代码 你最好在开始的时候 初学者的时候 你就是每写好代码 你都要写清楚这个代码是做什么的 因为这个它会非常清晰地告诉你 你在做什么东西 尤其是当你的代码写长了之后 虽然说你可能看个半个小时 你能回忆起来对吧 但是你何必要看半个小时呢 对吧 你可能当时写代码的时候 你可能30秒钟加一个注释对吧 当然你也可以让 现在有一些这种插件或者GPD的这种插件 可以帮你写代码或者是写注释 然后像我前面说的copilot对吧 它为什么能够去根据你的提示 它就会能够给你写代码 就是因为其实很多程序员 他都是这样的 我写一行注释 我接下来要做什么 然后他就写代码对吧 所以他们就根据这个代码和注释之间的关系 就训练出来 比方说你说我要读取这个文件夹里面的所有的文件 它就会帮你自动把代码写出来 那么对于我们来说的话 其实我们要通过这个注释来给我们很多的提示 那么还有一个就是命名 你的variable names 就是你这个时候 你怎么给自己的这个变量取名字 那么像在刚开始的时候 看到很多室内代码都是以这种 data开头的对吧 或者什么df开头的 对吧 df.getframe 看过的时候大家可能也会就直接 无论我做什么项目 data或者df开头 做变量命名对吧 刚开始的时候很方便 但是当你要在一个 比方说一个armortime里面 你要完成多个实验数据的分析的时候 你看有多个数据来源 这个时候你就不能再只用 data或者是df了 你必须要 就像我们前面的文档的命名一样 你必须要让大家很清楚的知道你这个data 它是什么 就是你最好是 比方说你是一个data frame对吧 你可以用df开头 但是你后面一定要跟其他的词 把它和其他的后面你可能读的data frame区分开来 你看到data frame的名字 你就知道ok这个是什么变量 我知道我要做什么 这样是最好的 那么在R里面的话 你可以用点 这个其实是一个很好的 就是说你 比方说df.icc对吧 或者是df.experimental1对吧 你这样的话你就知道这是第一个实验的 一个数据框对吧 但是在很多其他软件里面 像Python或者MATLAB的话 这个点本身是有意义的 所以一般来说 你可以 如果你只用R的话 你可以用点 但实际上我刚开始用R的时候 我继承了很多在MATLAB里面的一些习惯 我一般都是用下划线 因为这样的话基本上不会出错 那么当你有很多这个数据之后 假如说你想这个代码 如果你不把它搞清楚的话 变量名不弄清楚的话 你这个时候你看到就是什么 什么ff1啊ss1啊什么data1啊data2啊data3啊 那你多了之后 其实你也不记得了对吧 你也不知道到底哪个data是哪个了 所以有一个清晰的变量名 实际上是非常重要的 那么我们的这个 还有一个做法 我觉得可能大家可以 这是一种做法 大家可以去考虑一下 适不适合自己 就是你创建几个文件夹对吧 然后这个文件夹里面 每个文件夹里面 可能都有很多这个数据 那么你就想我能不能把这个 直接把这个每一个文件夹里面 对应的数据全部放到一个list里面 这个实际上是一个可行的做法 就比方说我们这里有多个数据对吧 那我就直接data frame 对吧有一个list 然后output有一个list 然后picture有一个list对吧 那么后面的话我就把所有的 这个data就放到这个DF list里面去 比方说DF1对吧 我就是read什么什么 然后给它一个名字叫raw对吧 然后第二个就是 我实际上就是在第一个基础上 进行了一系列的一个预处理 处理完了之后变成一个clean data 那么我又把它放这个DF list里面 那么你做完了之后的话 这个时候你的chunk的话 就类似于你在 应该跳到这个地方 这个地方我觉得确实还是挺清晰的 你跟每一个 就list里面每一个元素你命名的时候 你点开了之后你看其实 每一个list代表什么东西 你还是很清楚的对吧 它的名字是很清晰的 但是这里有一个问题 就是我当然这是我个人的一个质疑 就是说比方说你有10个data对吧 那么你最后你全部放DF里面 你调用的时候都是直接用这个序号来调用的话 可能是不太有效的一种方法 有可能你不记得哪一个对应的是哪个了 比方你现在第一个你知道是原始数据对吧 所以你在第一个的原始数据基础上 进行数据的预处理 然后变成第二个 那么过一段时间之后 你可能又做了别的操作 你再回过头看的时候 你还能不能记住 你这个DF里面的第一个元素是原始数据 第二个是干净的数据呢对吧 可能你得看右边的这个global 就是看你的环境里面这些东西你才能找到 所以这也是可能的一个弊端 当然如果说我还没有测试 应该理论上讲应该是可以直接用名字来调用 这个list里面每一个元素的 那样的话其实就很方便了 你直接用名字对吧 用每一个元素的名字来去调用这个list里面的元素 就很方便了 因为这里有个names 然后还有就是你的chunk 你的每一个操作最好是把每一个操作都放在一个独立的代码框里 对吧 然后你可以测试完之后 就可以直接运行某一个chunk 这样你报错的时候 你其实也知道你哪一个出错了 然后每一个chunk的话 你最好取名字 这个时候它会起到一个非常好的导航的效果 我们之前跟大家说过 当你把这个chunk取了名字之后 实际上你能够在这里找到 然后我们这里就全部是空的 所以你只要把这个chunk取了名字之后 你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个list 然后你就可以直接运行这个listchunk123,没有任何的信息 假如说我们给这个chunk取名字之后的话 其实我们就更好找 比方说我们现在回到chunk1 然后我们在这个后面 写一个start 然后这个地方我们再来看的话 就是chunk1后面就会跟一个start 对吧 我们就知道这个chunk它是在做什么 所以对chunk进行命名的话 其实是很重要的一个 很好的一个practice OK 这前面我们都讲 就是如果说你把new list 这样来存你的所有的变量的话 你可以保证这里很干净 就是你看起来很干净 但是要不要这么做 你可以看个人了 其实我平时做数据分析 这里都是很多变量的 就是没有把它弄成这样 因为我觉得按照这种方法的话 有可能你需要记很多东西在脑子里面 实际上我一般就是这样的 对我的平时分析数据 就是这里基本上就是这样的 当然有可能你到最后的时候 对吧 你快要投稿了 你可以想把它整理整理 这个地方是可以的 但平时的话 你就花很多时间在这个上面的话 除非你特别偏好这种方式 我觉得它也有可能会比较慢 然后commit的话 对吧 你我们前面讲的就是说 你做完了之后 你要去加一个东西 对吧 那么然后你再加一个 Git的一个load 对吧 然后我们刚刚说了 你可以把今天的更改 对吧 就直接上传到GitHub上面去 这实际上就是把我们的项目和GitHub 进行完整的一个整合 就像你在一边写代码 写完了之后 我把今天所有的东西都 通过Git status Git add对吧 然后Git commit 然后Git push 到GitHub上面去 这样的话 你就每天的东西都会记录下来 那么这是这里的演示 那么还有一个就是你的 这个在markdown里面的话 可以保存结果 那么保存结果的话 但有一种形式就是说 你可能用单独的一个markdown文件来保存结果 这个可以拿去分析的时候这么做 但是你的markdown文件很多的话 最后你可能也会觉得 其实也不方便管理对吧 所以这个是见仁见智 因为在这个地方 就是我们说在ARM studio里面 这个地方可以用来导航对吧 大家可以看到这个地方所有的 每一个内容 它实际上都是对应的有这种警号的 也就是说 因为大家平时自己做数据分析的话 不会像我们要写这么多标题的 因为我们这个是为了 演示演示过程中有很多这种标题去加重对吧 但大家做数据分析的话 肯定不会写这么多东西 你可能就第1个标题对吧 比方说我数据预处理 第2个标题就是比方说Alova对吧 第3个标题就是简单效应分析对吧 第4个就是画图 那样的话其实会很干净 然后这边还有一个outline 这边的outline的话基本上就是 我们之前也跟大家简单讲过对吧 你可以快速进行导航 这个地方也是你显示你的 大家可以看到这里基本上也是跟我们前面说的一样 都是有这种有标题的这些 警号的这些地方 所以大家平时在自己的数据分析中 肯定不会写这么的警号啊 只有在我们做PVT的时候 可能会有这种情况 还有一个就是画图的部分 画图的部分的话 当然你也可以就直接去 把这个数据预处理好 然后把自己不同的画图 然后或者画图相关的一些参数对吧 都把它放到P那个list里面去 比方说我们可以用GDPlot 画一些这种 可以用于发表的这种图片对吧 就是这种Ring Cloud 还有或者其他的 我们下节课就会讲这种 可用于发表的这种图片的细条 那么细条完了之后 基本上如果说我们按照传统的这种办法的话 我们基本上就是数据预处理对吧 然后结果分析然后画质都出现了 然后我们就可以放到一个这里 然后整个数据就整个代码就分成了几个部分对吧 大家可以看到有output 那么有malova然后有plot 有plot代码对吧 然后我们就可以把它整个上传到Github上面去 然后最后它就变成这么一个形式对吧 你这里有Rproject 然后每个里面有对应的相应的代码 那么当大家做了一定的 我们前面实际上讲的是做一个实验数据的分析 我们今天给大家讲完了 就是说大家可能不一定能够全部记得住 但是给大家先留这么一个印象吧 就是当你做了多个数据多个实验 然后你可能一般你在你的整个研究生阶段里 不可能只做一个实验 那么你做第一个实验和第二个实验相互之间是有关联的 那么你有些很多代码你会想重复使用对吧 那么假如我重复只使用一次的话 我把那个代码整个把你的copy paste过来对吧 改一改里面那些东西我还可以用 但是假如说你要一个代码你要复用10次 你想copy paste10次的话 那你还没出错 那么这个时候怎么办 我们很常见的一个办法就把它打成一个包 打成一个包了之后就把它直接调用 那么我们前面是用这种方式对吧 每一步我们就用一个R Markdown对吧 但实际上这样的话 假如说我们有不同的实验的话 我们可能就有很多代码在不同的R Markdown里面 要进行反复的复制粘贴对吧 而且还容易出错 那么最好的就是我们重新建一个 这个时候我们要用R Script就脚本文件 把我们的重复操作变成一个函数 放在这个R脚本文件里面去 然后每次就使用source这个函数来进行 把这个R脚本文件里面一大堆代码 对吧全部运行一遍就使用这个source 那么我自己分析的代码R Markdown 它还是看得很整洁的 我就文字文字之后每一行就是 我把那函数直接拿过来用对吧 然后就是这样的话我自己的主要的代码R Markdown 它会非常的简洁 而且非常逻辑结构非常清晰 那么函数的话我们之前给大家说过对吧 比方说你可以 假如说你的这个函数是要对每个Base都用的话 你可以比方说 它变化的就是Base对吧 当然你也可以用其把一些其他的 argument把它设置出来 然后这样的话你就可以对它做一些其他的一些处理 那这个函数的部分的话我们之前讲过 大家要定一个函数的话其实 可能我们课上的不会不太能够直接用 但是我们后面可能会有一些代码展示出来 就是大家可以直接参考 那比方说我们在这里有一个function对吧 就是叫做myfunction 然后它有一个自己的输入 然后有一些要定义的一些argument对吧 然后最后有一个输出对吧 那么最后我们要做的时候 就像我们就是把每一个 比方说每一个数据我们就直接调用 这个myfunction就可以了对吧 这样的话我们就不用再重复的去写代码了 也就是说这个时候我们变成myfunction 然后比方说我们改变后面的某一个参数对吧 它就完全是另外一个操作了 或者我们改变一个数据 它就会对这个数据做同样的操作 做一遍然后做一个输出对吧 如果我们不把它打标成一个函数的话 这个时候我们就要把原来的这一全部复制粘贴 这样的话就是比较看起来的话就会很冗长 那么当然你也可以就是说 再进一步的去优化对吧 比方说你就可以直接把它打成 你有很多函数 比方说你发现你最后一个项目完整下来 自己创建了很多新的函数 这函数都是别人没有创建过的 而对你的研究来说非常有帮助的 而且也是可以复用的 那么下一步的话你就可以把它打成一个包了 那实际上这就是包含武装它的那个BruceR的来源 我们之前这些我有点忘记了 不知道他们能不能有机会跟大家分享 因为包含武装现在去英国做活后了 可能时间比较忙 那么他那个BruceR刚开始就是自己有一些函数 自己实验室要用的 然后就把这些函数写下来 发现很多函数都在他们的科技组里面 经常使用他就把它打成一个包 然后后来这个包就不断的完善 就变成了这个BruceR现在大家都会 心理学的人都非常喜欢用的一个包 所以就是说大家如果说在自己的科技组 有一些特异性的一些函数 即便是对你们的这个科技组 仅仅适用于你们的科技组 你也可以考虑函数写多了之后 你把它集成起来成为一个秘密包 那么这个包它其实看起来比较困难 但实际上并不难 就是R包它实际上是一个非常 只要花时间就可以搞定的一个事情 因为网上的这个教程非常之多 所以大家这个 当然孟哲也在这里举了一个例子 大家有兴趣的话可以去看一看 但实际上我觉得大家 甚至都不一定需要看孟哲这个例子 你只需要去说 第一你有没有足够的函数 第二你想不想把它打成一个包 你想的话就可以考虑在网上受教程 然后怎么做 如果你在GitHub上面的话 还有一些GitHub的插件 帮你去做这个R包 那这里的话就是孟哲给了一些自己的例子 我觉得这个其实他已经比我 比我厉害了 因为我自己还没有打过R包 所以我们今天的这个小节 我们今天的内容基本上就是完全是为了 在科研的实验当中去如何方便自己 把自己的文件带进一个系统的环境 然后主要包括几个部分 外在的一个工具就是Disk在GitHub 这个大家一定要去学会使用 因为这是我们考核的小作业的一部分内容 第二个就是你自己文件夹的管理 那么项目管理 我们说项目管理 项目管理的话就是文件夹系统 加Rproject两个部分 那么文件夹管理系统的话 这只是说我们在这里只是给出一个 我自己课题组的一个建议 那么想给大家一个提示就是说 其实文件夹 关于科研的文件夹也是可以进行标准化 然后也是可以进行一个 几乎一个很好的模板 大家可以相互的去保持同一个风格 这样的话最好 同一个课题组之间相互之间更好的交流 那么Rproject就是关于我们的代码的管理 这一块的话实际上是在R生态系统里面 已经非常成熟了 而且Rproject它的存在就是为了 我们方便管理代码和数据 所有的结果对吧 所以大家如果用R这个数据分析的话最好 或者一定要用Rproject 然后最后就是代码的细节的管理 你如何去使用变量云 然后你这个Python的风格 Python的风格其实我们也展开讲了 Python的风格我们可以顺便提一句 因为我们讲这个数据域处理的时候 实际上我们讲Tidyverse 那么Tidyverse的一个好处就是说 你不需要生成中间变量对吧 你就是一个管道下来 如果大家还记得我们这些数据域处理 很长的一个占满了屏幕的一个管道对吧 从原数据一直到最后干净的数据 从原数据一直到最后什么 deep prime每次开始deep prime都出来对 那么这都是我们可以通过Python 去完成的这样的话我们就不需要什么 额外的一些中间变量 你的这个environment里面看起来就会很干净 然后就是你的代码的封装 封装的话最简单的封装就是 打包成函数 打包成函数之后你把独立的一个ascript放起来 这样的话你的主要的分析代码会显得很干净 然后如果你的数据函数够了之后 你就可以打成一个R包 这样的话就是说你会更加的能够 反复的使用自己以前用过的一些函数 那么这就是我们这几天要讲的一些内容 大家可能会觉得跟自己的 目前的这个数据分析可能会有一点点远 但是这是一个 不是说一开始你就要把所有的东西都做完 而是大家要知道一个好的有效的一个 很好的一个有效的一个函数 然后这个函数的几个函数 它们是有一个很大的差异的 就是它们的数据的几个函数 它们是有一个很大的差异的 就是它们的数据的几个函数 它们是有一个很大的差异的 就是它们的数据的几个函数 它们是有一个很大的差异的 就是它们的数据的几个函数 它们是有一个很大的差异的 就是它们的数据的几个函数 它们是有一个很大的差异的 就是它们的数据的函数 它们是有一个很大的差异的科研项目的管理大概是一个什么样子的,然后你碰到了什么东西 你就你肯定会去想要不要用 然后你现在手头有个数据你要去分析它对吧 导师让你分析它 那你现在就可以用这个Aproject 维他命C的一个维利亚对吧 这就是你现在可以做的 然后不要说你要做实验了 那你是不是可以去参考一个标准的做法 然后你可以跟导师商量 这个是不是你们喜欢的 能够共同通用的一个维利亚管理系统 然后至于你自己的代码命题 就是这个排比的风格这个东西 你刚开始的时候你可以不用那么在意 但是你每一次整理代码的时候 你就去不断的改善 只有这样的话你的代码才会越来越干净 越来越整洁 并且越来越有逻辑 这个是需要大家去不断的在使用的过程中去提高的 而不是说今天我讲完大家就全会了 这是不可能的 我就跟大家说我自己使用的地铁实验 一定很多个才发现有Git Ignore这个东西 所以大家会在首先是要用起来 一定要把这个GitHub用起来 然后把RProject用起来 然后后面的话在使用的过程中不断的提高 那今天就是我们要讲的全部内容 讲的比较多样 然后前面那个Git大家好像我不知道 我们后面可以把这个视频分享给大家 大家可能如果有兴趣的话 因为我们在这个地方是有录这个视频的 OK 那我们今天课就到这儿 然后大家有问题吗 有没有问题 大家上次讲的那个问卷搜集到东西 我也看到了 但是不一定能够满足大家全部的要求 Meta分析我们会讲 但是混合讯息模型就是MME 我们不一定会讲要看情况 从数据输入到分析到画图完整的跑一遍 这个我们一定会讲的 因为这个是我们讲那个Papilla的时候肯定会涉及到的 然后Git这个今天已经讲了 然后其他的效应量和自行区间 这个好像应该不用讲了 不是啥里面都有 还有其他的关于解释代码的用法 这个我们碰到代码 我们基本上都会去尽量慢慢把它解释清楚 今天这节课涉及到代码比较少 下节课画图的时候可能代码会比较多 大家碰到不同的代码可以随时举手提问 OK那我们今天的课就到这